# frozen_string_literal: true

require_relative 'meta'
require_relative '../base'
require_relative 'corporation'
require_relative 'depot'
require_relative 'minor'

module Engine
  module Game
    module G1835
      class Game < Game::Base
        include_meta(G1835::Meta)

        attr_accessor :two_train_bought, :forced_mountain_railway_exchange

        register_colors(
          gray70: '#B3B3B3',
          gray50: '#7F10F10F'
        )

        CURRENCY_FORMAT_STR = '%dM'

        BANK_CASH = 12_000

        CERT_LIMIT = { 3 => 19, 4 => 15, 5 => 12, 6 => 11, 7 => 9 }.freeze

        STARTING_CASH = { 3 => 600, 4 => 475, 5 => 390, 6 => 340, 7 => 310 }.freeze
        # money per initial share sold
        CAPITALIZATION = :incremental

        MUST_SELL_IN_BLOCKS = false

        TILES = {
          '1' => 1,
          '2' => 1,
          '3' => 2,
          '4' => 3,
          '5' => 3,
          '6' => 3,
          '7' => 8,
          '8' => 16,
          '9' => 12,
          '55' => 1,
          '56' => 1,
          '57' => 2,
          '58' => 4,
          '69' => 2,
          '201' => 2,
          '202' => 2,
          '12' => 2,
          '13' => 2,
          '14' => 2,
          '15' => 2,
          '16' => 2,
          '18' => 1,
          '19' => 2,
          '20' => 2,
          '23' => 3,
          '24' => 3,
          '25' => 3,
          '26' => 2,
          '27' => 2,
          '28' => 2,
          '29' => 2,
          '87' => 2,
          '88' => 2,
          '203' => 2,
          '204' => 2,
          '205' => 1,
          '206' => 1,
          '207' => 2,
          '208' => 2,
          '209' => 1,
          '210' => 1,
          '211' => 1,
          '212' => 1,
          '213' => 1,
          '214' => 1,
          '215' => 1,
          '39' => 1,
          '40' => 1,
          '41' => 2,
          '42' => 2,
          '43' => 1,
          '44' => 2,
          '45' => 2,
          '46' => 2,
          '47' => 2,
          '63' => 3,
          '70' => 1,
          '216' => 4,
          '217' => 2,
          '218' => 2,
          '219' => 2,
          '220' => 1,
          '221' => 1,
        }.freeze

        LOCATION_NAMES = {
          'A11' => 'Kiel',
          'C11' => 'Hamburg',
          'C13' => 'Schwerin',
          'D6' => 'Oldenburg',
          'D8' => 'Bremen',
          'F10' => 'Hannover',
          'F12' => 'Braunschweig',
          'F14' => 'Magdeburg',
          'G3' => 'Duisburg Essen',
          'G5' => 'Dortmund',
          'H2' => 'Düsseldorf',
          'I3' => 'Köln',
          'H16' => 'Leipzig',
          'H20' => 'Dresden',
          'J6' => 'Mainz Wiesbaden',
          'J8' => 'Frankfurt',
          'L6' => 'Ludwigshafen Mannheim',
          'L14' => 'Fürth Nürnberg',
          'M9' => 'Stuttgart',
          'N12' => 'Augsburg',
          'O5' => 'Freiburg',
          'O15' => 'München',
          'M13' => 'Ostbayern',
          'M15' => 'Ostbayern',
        }.freeze

        MARKET = [['',
                   '',
                   '',
                   '',
                   '132',
                   '148',
                   '166',
                   '186',
                   '208',
                   '232',
                   '258',
                   '286',
                   '316',
                   '348',
                   '382',
                   '418'],
                  ['',
                   '',
                   '98',
                   '108',
                   '120',
                   '134',
                   '150',
                   '168',
                   '188',
                   '210',
                   '234',
                   '260',
                   '288',
                   '318',
                   '350',
                   '384'],
                  %w[82
                     86
                     92p
                     100
                     110
                     122
                     136
                     152
                     170
                     190
                     212
                     236
                     262
                     290
                     320],
                  %w[78
                     84p
                     88p
                     94
                     102
                     112
                     124
                     138
                     154p
                     172
                     192
                     214],
                  %w[72 80p 86 90 96 104 114 126 140],
                  %w[64 74 82 88 92 98 106],
                  %w[54 66 76 84 90]].freeze

        PHASES = [
          {
            name: '1.1',
            on: '2',
            train_limit: { PreStaatsbahn: 2, major: 4 },
            tiles: [:yellow],
            operating_rounds: 1,
          },
          {
            name: '1.2',
            on: '2+2',
            train_limit: { PreStaatsbahn: 2, major: 4 },
            tiles: [:yellow],
            operating_rounds: 1,
          },
          {
            name: '2.1',
            on: '3',
            train_limit: { PreStaatsbahn: 2, major: 4 },
            tiles: %i[yellow green],
            operating_rounds: 2,
          },
          {
            name: '2.2',
            on: '3+3',
            train_limit: { major: 4, PreStaatsbahn: 2 },
            tiles: %i[yellow green],
            operating_rounds: 2,
          },
          {
            name: '2.3',
            on: '4',
            train_limit: { prussian: 4, major: 3, PreStaatsbahn: 1 },
            tiles: %i[yellow green],
            operating_rounds: 2,
          },
          {
            name: '2.4',
            on: '4+4',
            train_limit: { prussian: 4, major: 3, PreStaatsbahn: 1 },
            tiles: %i[yellow green],
            operating_rounds: 2,
          },
          {
            name: '3.1',
            on: '5',
            train_limit: { prussian: 3, major: 2 },
            tiles: %i[yellow green brown],
            operating_rounds: 3,
            events: { close_companies: true },
          },
          {
            name: '3.2',
            on: '5+5',
            train_limit: { prussian: 3, major: 2 },
            tiles: %i[yellow green brown],
            operating_rounds: 3,
          },
          {
            name: '3.3',
            on: '6',
            train_limit: { prussian: 3, major: 2 },
            tiles: %i[yellow green brown],
            operating_rounds: 3,
          },
          {
            name: '3.4',
            on: '6+6',
            train_limit: { prussian: 3, major: 2 },
            tiles: %i[yellow green brown],
            operating_rounds: 3,
          },
        ].freeze

        TRAINS = [{ name: '2', distance: 2, price: 80, rusts_on: '4', num: 9 },
                  { name: '2+2', distance: 2, price: 120, rusts_on: '4+4', num: 4 },
                  { name: '3', distance: 3, price: 180, rusts_on: '6', num: 4 },
                  { name: '3+3', distance: 3, price: 270, rusts_on: '6+6', num: 3 },
                  { name: '4', distance: 4, price: 360, num: 3 },
                  { name: '4+4', distance: 4, price: 440, num: 1 },
                  { name: '5', distance: 5, price: 500, num: 2 },
                  { name: '5+5', distance: 5, price: 600, num: 1 },
                  { name: '6', distance: 6, price: 600, num: 2 },
                  { name: '6+6', distance: 6, price: 720, num: 4 }].freeze

        COMPANIES = [
          {
            sym: 'EPP',
            name: 'C1 Eisenbahn Pilsen - Priesen',
            value: 200,
            interval: [120, 140, 160, 180, 200],
            revenue: 0,
            desc: "Buyer take control of minor Coal Railway EPP (C1), which can be exchanged for the Director's "\
              'certificate of Regional Railway BK during SRs in phase 3 or 4, or automatically when phase 5 starts. '\
              'BK floats after exchange as soon as 50% or more are owned by players. This private cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'EOD',
            name: 'C2 Eisenbahn Oderberg - Dombran',
            value: 200,
            interval: [120, 140, 160, 180, 200],
            revenue: 0,
            desc: "Buyer take control of minor Coal Railway EOD (C2), which can be exchanged for the Director's "\
              'certificate of Regional Railway MS during SRs in phase 3 or 4, or automatically when phase 5 starts. '\
              'MS floats after exchange as soon as 50% or more are owned by players. This private cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'MLB',
            name: 'C3 Mosty - Lemberg Bahn',
            value: 200,
            interval: [120, 140, 160, 180, 200],
            revenue: 0,
            desc: "Buyer take control of minor Coal Railway MLB (C3), which can be exchanged for the Director's "\
              'certificate of Regional Railway CL during SRs in phase 3 or 4, or automatically when phase 5 starts. '\
              'CL floats after exchange as soon as 50% or more are owned by players. This private cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'SPB',
            name: 'C4 Simeria-Petrosani Bahn',
            value: 200,
            interval: [120, 140, 160, 180, 200],
            revenue: 0,
            desc: "Buyer take control of minor Coal Railway SPB (C4), which can be exchanged for the Director's "\
              'certificate of Regional Railway SB during SRs in phase 3 or 4, or automatically when phase 5 starts. '\
              'SB floats after exchange as soon as 50% or more are owned by players. This private cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'S1',
            name: 'S1 Wien-Gloggnitzer Eisenbahngesellschaft',
            value: 240,
            revenue: 0,
            desc: "Buyer take control of pre-staatsbahn S1, which will be exchanged for the Director's certificate "\
              'of SD when the first 4 train is sold. Pre-Staatsbahnen starts in Wien (E23). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'S2',
            name: 'S2 Kärntner Bahn',
            value: 120,
            revenue: 0,
            desc: 'Buyer take control of pre-staatsbahn S2, which will be exchanged for a 10% share of SD when the '\
              'first 4 train is sold. Pre-Staatsbahnen starts in Graz (D8). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'S3',
            name: 'S3 Nordtiroler Staatsbahn',
            value: 120,
            revenue: 0,
            desc: 'Buyer take control of pre-staatsbahn S3, which will be exchanged for a 10% share of SD when the '\
              'first 4 train is sold. Pre-Staatsbahnen starts in Innsbruck (G5). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'U1',
            name: 'U1 Eisenbahn Pest - Waitzen',
            value: 240,
            revenue: 0,
            desc: "Buyer take control of pre-staatsbahn U1, which will be exchanged for the Director's certificate "\
              'of UG when the first 5 train is sold. Pre-Staatsbahnen starts in Pest (F24) in base 1835 and in '\
              'Budapest (G12) for 3 players on the Cislethania map. Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'U2',
            name: 'U2 Mohacs-Fünfkirchner Bahn',
            value: 120,
            revenue: 0,
            desc: 'Buyer take control of pre-staatsbahn U2, which will be exchanged for a 10% share of UG when the '\
              'first 5 train is sold. Pre-Staatsbahnen starts in Fünfkirchen (H20). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'K1',
            name: 'K1 Kaiserin Elisabeth-Bahn',
            value: 240,
            revenue: 0,
            desc: "Buyer take control of pre-staatsbahn K1, which will be exchanged for the Director's certificate "\
              'of KK when the first 6 train is sold. Pre-Staatsbahnen starts in Wien (E23). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
          {
            sym: 'K2',
            name: 'K2 Kaiser Franz Joseph-Bahn',
            value: 120,
            revenue: 0,
            desc: 'Buyer take control of pre-staatsbahn K2, which will be exchanged for a 10% share of KK when the '\
              'first 6 train is sold. Pre-Staatsbahnen starts in Wien (E23). Cannot be sold.',
            abilities: [{ type: 'no_buy', owner_type: 'player' }],
            color: nil,
          },
        ].freeze

        CORPORATIONS = [
          {
            float_percent: 50,
            name: 'Böhmische Kommerzbahn',
            sym: 'BK',
            type: 'Regional',
            tokens: [0, 40, 60, 80],
            logo: '1835/BK',
            simple_logo: '1835/BK.alt',
            color: :blue,
            coordinates: 'F10',
            reservation_color: nil,
          },
          {
            name: 'Mährisch-Schlesische Eisenbahn',
            sym: 'MS',
            type: 'Regional',
            float_percent: 50,
            tokens: [0, 40, 60, 80],
            logo: '1835/MS',
            simple_logo: '1835/MS.alt',
            color: :yellow,
            text_color: 'black',
            coordinates: 'F10',
            reservation_color: nil,
          },
          {
            name: 'Carl Ludwigs-Bahn',
            sym: 'CL',
            type: 'Regional',
            float_percent: 50,
            tokens: [0, 40, 60, 80],
            color: '#B3B3B3',
            logo: '1835/CL',
            simple_logo: '1835/CL.alt',
            coordinates: 'F10',
            reservation_color: nil,
          },
          {
            name: 'Siebenbürgische Bahn',
            sym: 'SB',
            type: 'Regional',
            float_percent: 50,
            tokens: [0, 40, 60, 80],
            logo: '1835/SB',
            simple_logo: '1835/SB.alt',
            color: :green,
            text_color: 'black',
            coordinates: 'A11',
            reservation_color: nil,
          },
          {
            name: 'Bosnisch-Herzegowinische Landesbahn',
            sym: 'BH',
            type: 'Regional',
            float_percent: 50,
            tokens: [0, 40, 100],
            logo: '1835/BH',
            simple_logo: '1835/BH.alt',
            color: :red,
            coordinates: 'J13',
            reservation_color: nil,
          },
          {
            name: 'Südbahn',
            sym: 'SD',
            type: 'Staatsbahn',
            float_percent: 10,
            tokens: [100, 100],
            abilities: [
              {
                type: 'no_buy',
                description: 'Unavailable in SR before phase 4',
              },
            ],
            logo: '1835/SD',
            simple_logo: '1835/SD.alt',
            color: :orange,
            text_color: 'black',
            reservation_color: nil,
          },
          {
            name: 'Ungarische Staatsbahn',
            sym: 'UG',
            type: 'Staatsbahn',
            float_percent: 10,
            tokens: [100, 100, 100],
            abilities: [
              {
                type: 'no_buy',
                description: 'Unavailable in SR before phase 5',
              },
            ],
            logo: '1835/UG',
            simple_logo: '1835/UG.alt',
            color: :purple,
            reservation_color: nil,
          },
          {
            name: 'k&k Staatsbahn',
            sym: 'KK',
            type: 'Staatsbahn',
            float_percent: 10,
            tokens: [40, 100, 100, 100],
            abilities: [
              {
                type: 'no_buy',
                description: 'Unavailable in SR before phase 6',
              },
            ],
            logo: '1835/KK',
            simple_logo: '1835/KK.alt',
            color: :brown,
            reservation_color: nil,
          },
          {
            sym: 'PR',
            name: 'Preussische Eisenbahn',
            type: 'Staatsbahn',
            logo: '1835/PR',
            simple_logo: '1835/PR.alt',
            tokens: [0, 0, 0, 0, 0],
            shares: [10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5],
            # shares for minors and Privates should be reserved
            abilities: [
              {
                type: 'no_buy',
                description: 'Unavailable in SR until Baden-Dir is sold',
              },
            ],
            coordinates: 'E19',
            color: '#37383a',
            reservation_color: nil,
          },
        ].freeze

        MINORS = [
          {
            sym: 'P1',
            name: 'P1 Bergisch Märkische Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/P1',
            coordinates: 'H2',
            city: 0,
            color: :black,
          },         
          {
            sym: 'P2',
            name: 'P2 Berlin Potsdamer Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/P2',
            coordinates: 'E19',
            city: 0,
            color: :black,
          },         
          {
            sym: 'P3',
            name: 'P3 Magdeburger-Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/P3',
            coordinates: 'F14',
            city: 0,
            color: :black,
          },         
          {
            sym: 'P6',
            name: 'P6 Altona Kiel Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/P6',
            coordinates: 'C11',
            city: 1,
            color: :black,
          },         
          {
            sym: 'S1',
            name: 'S1 Wien-Gloggnitzer Eisenbahngesellschaft',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/S1',
            coordinates: 'E23',
            city: 0,
            color: :orange,
          },
          {
            sym: 'S2',
            name: 'S2 Kärntner Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/S2',
            coordinates: 'D8',
            city: 0,
            color: :orange,
          },
          {
            sym: 'S3',
            name: 'S3 Nordtiroler Staatsbahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/S3',
            coordinates: 'G5',
            city: 0,
            color: :orange,
          },
          {
            sym: 'U1',
            name: 'U1 Eisenbahn Pest - Waitzen',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/U1',
            coordinates: 'F24',
            city: 1,
            color: :purple,
          },
          {
            sym: 'U2',
            name: 'U2 Mohacs-Fünfkirchner Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/U2',
            coordinates: 'H20',
            city: 0,
            color: :purple,
          },
          {
            sym: 'K1',
            name: 'K1 Kaiserin Elisabeth-Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            coordinates: 'E23',
            city: 1,
            color: :brown,
            logo: '1835/K1',
          },
          {
            sym: 'K2',
            name: 'K2 Kaiser Franz Joseph-Bahn',
            type: 'PreStaatsbahn',
            tokens: [0],
            logo: '1835/K2',
            coordinates: 'E23',
            city: 2,
            color: :brown,
          },
        ].freeze

        LAYOUT = :pointy

        AXES = { x: :number, y: :letter }.freeze

        GAME_END_CHECK = { bank: :full_or }.freeze

        # Move down one step for a whole block, not per share
        SELL_MOVEMENT = :down_block

        # Cannot sell until operated
        SELL_AFTER = :operate

        # Sell zero or more, then Buy zero or one
        SELL_BUY_ORDER = :sell_buy

        EVENTS_TEXT = Base::EVENTS_TEXT.merge(
          'close_mountain_railways' => ['Mountain railways closed', 'Any still open Montain railways are exchanged'],
          'sd_formation' => ['SD formation', 'The Suedbahn is founded at the end of the OR'],
          'close_coal_railways' => ['Coal railways closed', 'Any still open Coal railways are exchanged'],
          'ug_formation' => ['UG formation', 'The Ungarische Staatsbahn is founded at the end of the OR'],
          'kk_formation' => ['k&k formation', 'k&k Staatsbahn is founded at the end of the OR']
        ).freeze

        STATUS_TEXT = Base::STATUS_TEXT.merge(
          'can_buy_trains' => ['Can Buy trains', 'Can buy trains from other corporations'],
          'may_exchange_coal_railways' => ['Coal Railway exchange', 'May exchange Coal Railways during SR'],
          'may_exchange_mountain_railways' => ['Mountain Railway exchange', 'May exchange Mountain Railways during SR']
        ).freeze

        CERT_LIMIT_CISLEITHANIA = { 2 => 14, 3 => 16 }.freeze

        BANK_CASH_CISLEITHANIA = { 2 => 4000, 3 => 9000 }.freeze

        CASH_CISLEITHANIA = { 2 => 830, 3 => 680 }.freeze

        MOUNTAIN_RAILWAY_NAMES = {
          1 => 'Semmeringbahn',
          2 => 'Kastbahn',
          3 => 'Brennerbahn',
          4 => 'Arlbergbahn',
          5 => 'Karawankenbahn',
          6 => 'Wocheinerbahn',
        }.freeze


        def init_optional_rules(optional_rules)
          opt_rules = super

          # 2 player variant always use the Cisleithania map
          opt_rules << :cisleithania if two_player? && !opt_rules.include?(:cisleithania)

          # Good Time variant is not applicable if Cisleithania is used
          opt_rules -= [:goods_time] if opt_rules.include?(:cisleithania)

          opt_rules
        end

        def init_bank
          return super unless option_cisleithania

          Engine::Bank.new(BANK_CASH_CISLEITHANIA[@players.size], log: @log)
        end

        def init_starting_cash(players, bank)
          return super unless option_cisleithania

          players.each do |player|
            bank.spend(CASH_CISLEITHANIA[@players.size], player)
          end
        end

        def init_train_handler
          trains = self.class::TRAINS.flat_map do |train|
            Array.new((train[:num] || num_trains(train))) do |index|
              Train.new(**train, index: index)
            end
          end

          G1835::Depot.new(trains, self)
        end

        def init_corporations(stock_market)
          corporations = CORPORATIONS.dup

          corporations.map! do |corporation|
            G1835::Corporation.new(
              min_price: stock_market.par_prices.map(&:price).min,
              capitalization: self.class::CAPITALIZATION,
              **corporation.merge(corporation_opts),
            )
          end

          if option_cisleithania
            # Some corporations need to be removed, but they need to exists (for implementation reasons)
            # So set them as closed and removed so that they do not appear
            # Affected: Coal Railway C4 (SPB), Regional Railway BH and SB, and possibly UG
            corporations.each do |c|
              if %w[SB BH].include?(c.name) || (two_player? && c.name == 'UG')
                c.close!
                c.removed = true
              end
            end
          end

          corporations
        end

        def init_minors
          minors = MINORS.dup

          if option_cisleithania
            if two_player?
              # Remove Pre-Staatsbahn U1 and U2, and minor SPB
              minors.reject! { |m| %w[U1 U2 SPB].include?(m[:sym]) }
            else
              # Remove Pre-Staatsbahn U2, minor SPB, and move home location for U1
              minors.reject! { |m| %w[U2 SPB].include?(m[:sym]) }
              minors.map! do |m|
                next m unless m['sym'] == 'U1'

                m['coordinates'] = 'G12'
                m['city'] = 0
                m
              end
            end
          end

          minors.map { |minor| G1835::Minor.new(**minor) }
        end

        def init_companies(players)
          companies = COMPANIES.dup

          mountain_railway_count =
            case players.size
            when 2
              2
            when 3
              option_cisleithania ? 3 : 4
            when 4, 5
              6
            when 6
              4
            end
          mountain_railway_count.times { |index| companies << mountain_railway_definition(index) }

          if option_cisleithania
            # Remove Pre-Staatsbahn U2 and possibly U1
            p2 = players.size == 2
            companies.reject! { |m| m['sym'] == 'U2' || (p2 && m['sym'] == 'U1') }
          end

          companies.map { |company| Company.new(**company) }
        end

        def init_tiles
          tiles = TILES.dup

          if option_goods_time
            # Goods Time increase count for some town related tiles
            tiles['3'] += 3
            tiles['4'] += 3
            tiles['56'] += 1
            tiles['58'] += 3
            tiles['87'] += 2
            tiles['630'] += 1
            tiles['631'] += 1

            # New tile for Goods Time variant
            tiles['204'] = 3
          end

          tiles.flat_map do |name, val|
            init_tile(name, val)
          end
        end

        def option_cisleithania
          @optional_rules&.include?(:cisleithania)
        end

        def option_goods_time
          @optional_rules&.include?(:goods_time)
        end

        def location_name(coord)
          return super unless option_cisleithania

          @location_names[coord]
        end

        def optional_hexes
          option_cisleithania ? cisleithania_map : base_map
        end

        def operating_round(round_num)
          Engine::Round::Operating.new(self, [
            Engine::Step::Bankrupt,
            Engine::Step::DiscardTrain,
            Engine::Step::HomeToken,
            G1835::Step::ForcedMountainRailwayExchange,
            Engine::Step::Track,
            Engine::Step::Token,
            Engine::Step::Route,
            G1835::Step::Dividend,
            G1835::Step::BuyTrain,
          ], round_num: round_num)
        end

        def init_round
          @log << '-- First Stock Round --'
          @log << 'Player order is reversed the first turn'
          G1835::Round::FirstStock.new(self, [
            G1835::Step::BuySellParSharesFirstSr,
          ])
        end

        def stock_round
          Engine::Round::Stock.new(self, [
            Engine::Step::DiscardTrain,
            G1835::Step::BuySellParExchangeShares,
          ])
        end

        def or_set_finished
          depot.export!
        end

        def coal_c1
          @c1 ||= minor_by_id('EPP')
        end

        def coal_c2
          @c2 ||= minor_by_id('EOD')
        end

        def coal_c3
          @c3 ||= minor_by_id('MLB')
        end

        def coal_c4
          @c4 ||= minor_by_id('SPB')
        end

        def regional_bk
          @bk ||= corporation_by_id('BK')
        end

        def regional_ms
          @ms ||= corporation_by_id('MS')
        end

        def regional_cl
          @cl ||= corporation_by_id('CL')
        end

        def regional_sb
          @sb ||= corporation_by_id('SB')
        end

        def state_sd
          @sd ||= corporation_by_id('SD')
        end

        def state_ug
          @ug ||= corporation_by_id('UG')
        end

        def state_kk
          @kk ||= corporation_by_id('KK')
        end

        def setup
          @two_train_bought = false
          @forced_mountain_railway_exchange = []

          @companies.each do |c|
            c.owner = @bank
            @bank.companies << c
          end

          @minors.each do |minor|
            hex = hex_by_id(minor.coordinates)
            hex.tile.cities[minor.city].place_token(minor, minor.next_token)
          end

          # Reserve the presidency share to have it as exchange for associated coal railway
          @corporations.each do |c|
            next if !regional?(c) && !staatsbahn?(c)
            next if c.id == 'BH'

            c.shares.find(&:president).buyable = false
            c.floatable = false
          end
        end

        def timeline
          @timeline ||= ['At the end of each OR set, the cheapest train in bank is exported.'].freeze
        end

        def status_str(entity)
          if coal_railway?(entity)
            'Coal Railway - may only own g trains'
          elsif pre_staatsbahn?(entity)
            'Pre-Staatsbahn'
          elsif staatsbahn?(entity)
            'Staatsbahn'
          elsif regional?(entity)
            str = 'Regional Railway'
            if (coal = associated_coal_railway(entity)) && !coal.closed?
              str += " - Presidency reserved (#{coal.name})"
            end
            str
          end
        end

        def can_par?(corporation, parrer)
          super && buyable?(corporation) && !reserved_regional(corporation)
        end

        def g_train?(train)
          train.name.end_with?('g')
        end

        def mountain_railway?(entity)
          entity.company? && entity.sym.start_with?('B')
        end

        def mountain_railway_exchangable?
          @phase.status.include?('may_exchange_mountain_railways')
        end

        def coal_railway?(entity)
          return entity.type == :Coal if entity.minor?

          entity.company? && associated_regional_railway(entity)
        end

        def coal_railway_exchangable?
          @phase.status.include?('may_exchange_coal_railways')
        end

        def pre_staatsbahn?(entity)
          entity.minor? && entity.type == :PreStaatsbahn
        end

        def regional?(entity)
          entity.corporation? && entity.type == :Regional
        end

        def staatsbahn?(entity)
          entity.corporation? && entity.type == :Staatsbahn
        end

        def reserved_regional(entity)
          return false unless regional?(entity)

          president_share = entity.shares.find(&:president)
          president_share && !president_share.buyable
        end

        def buyable?(entity)
          return true unless entity.corporation?

          entity.all_abilities.none? { |a| a.type == :no_buy }
        end

        def corporation_available?(entity)
          buyable?(entity)
        end

        def entity_can_use_company?(_entity, _company)
          # Return false here so that Exchange abilities does not appear in GUI
          false
        end

        def sorted_corporations
          sorted_corporations = super
          return sorted_corporations unless @turn == 1

          # Remove unbuyable stuff in SR 1 to reduce information
          sorted_corporations.select { |c| buyable?(c) }
        end

        def associated_regional_railway(coal_railway)
          key = coal_railway.minor? ? coal_railway.name : coal_railway.id
          case key
          when 'EPP'
            regional_bk
          when 'EOD'
            regional_ms
          when 'MLB'
            regional_cl
          when 'SPB'
            regional_sb
          end
        end

        def associated_coal_railway(regional_railway)
          case regional_railway.name
          when 'BK'
            coal_c1
          when 'MS'
            coal_c2
          when 'CL'
            coal_c3
          when 'SB'
            coal_c4
          end
        end

        def associated_state_railway(prestate_railway)
          case prestate_railway.id
          when 'S1', 'S2', 'S3'
            state_sd
          when 'U1', 'U2'
            state_ug
          when 'K1', 'K2'
            state_kk
          end
        end

        def revenue_for(route, stops)
          # Ensure only g-trains visit mines, and that g-trains visit exactly one mine
          mine_visits = route.hexes.count { |h| mine_hex?(h) }

          raise GameError, 'Exactly one mine need to be visited' if g_train?(route.train) && mine_visits != 1
          raise GameError, 'Only g-trains may visit mines' if !g_train?(route.train) && mine_visits.positive?

          super
        end

        def mine_revenue(routes)
          routes.sum { |r| r.stops.sum { |stop| mine_hex?(stop.hex) ? stop.route_revenue(r.phase, r.train) : 0 } }
        end

        def float_str(entity)
          return super if !entity.corporation || entity.floatable

          case entity.id
          when 'BK', 'MS', 'CL', 'SB'
            needed = entity.percent_to_float
            needed.positive? ? "#{entity.percent_to_float}% (including exchange) to float" : 'Exchange to float'
          when 'UG'
            'U1 exchange floats'
          when 'KK'
            'K1 exchange floats'
          when 'SD'
            'S1 exchange floats'
          else
            'Not floatable'
          end
        end

        def all_corporations
          @corporations.reject(&:removed)
        end

        def event_close_mountain_railways!
          @log << '-- Any remaining Mountain Railways are either exchanged or discarded'
          # If this list contains any companies it will trigger an interrupt exchange/pass step
          @forced_mountain_railway_exchange = @companies.select { |c| mountain_railway?(c) && !c.closed? }
        end

        def event_close_coal_railways!
          @log << '-- Exchange any remaining Coal Railway'
          @companies.select { |c| coal_railway?(c) }.reject(&:closed?).each do |coal_railway_company|
            exchange_coal_railway(coal_railway_company)
          end
        end

        def event_sd_formation!
          @log << 'SD formation not yet implemented'
        end

        def event_ug_formation!
          @log << 'UG formation not yet implemented'
        end

        def event_kk_formation!
          @log << 'KK formation not yet implemented'
        end

        def exchange_coal_railway(company)
          player = company.owner
          minor = minor_by_id(company.id)
          regional = associated_regional_railway(company)

          @log << "#{player.name} receives presidency of #{regional.name} in exchange for #{minor.name}"
          company.close!

          # Transfer Coal Railway cash and trains to Regional. Remove CR token.
          if minor.cash.positive?
            @log << "#{regional.name} receives the #{minor.name} treasury of #{format_currency(minor.cash)}"
            minor.spend(minor.cash, regional)
          end
          unless minor.trains.empty?
            transferred = transfer(:trains, minor, regional)
            @log << "#{regional.name} receives the trains: #{transferred.map(&:name).join(', ')}"
          end
          minor.tokens.first.remove!
          minor.close!

          # Handle Regional presidency, possibly transfering to another player in case they own more in the regional
          presidency_share = regional.shares.find(&:president)
          presidency_share.buyable = true
          regional.floatable = true
          @share_pool.transfer_shares(
            presidency_share.to_bundle,
            player,
            allow_president_change: false,
            price: 0
          )

          # Give presidency to majority owner (with minor owner priority if that player is one of them)
          max_shares = @share_pool.presidency_check_shares(regional).values.max
          majority_share_holders = @share_pool.presidency_check_shares(regional).select { |_, p| p == max_shares }.keys
          if !majority_share_holders.find { |owner| owner == player }
            # FIXME: Handle the case where multiple share the presidency criteria
            new_president = majority_share_holders.first
            @share_pool.change_president(presidency_share, player, new_president, player)
            regional.owner = new_president
            @log << "#{new_president.name} becomes president of #{regional.name} as majority owner"
          else
            regional.owner = player
          end

          float_corporation(regional) if regional.floated?
          regional
        end

        def float_corporation(corporation)
          @log << "#{corporation.name} floats"

          return if corporation.capitalization == :incremental

          case corporation.name
          when 'BK', 'MS', 'CL', 'SB'
            floating_capital = corporation.par_price.price * 8
          else
            floating_capital = corporation.par_price.price * corporation.total_shares
          end

          @bank.spend(floating_capital, corporation)
          @log << "#{corporation.name} receives floating capital of #{format_currency(floating_capital)}"
        end

        private

        def mine_hex?(hex)
          option_cisleithania ? MINE_HEX_NAMES_CISLEITHANIA.include?(hex.name) : MINE_HEX_NAMES.include?(hex.name)
        end

        MOUNTAIN_RAILWAY_DEFINITION = {
          sym: 'B%1$d',
          name: 'B%1$d %2$s',
          value: 120,
          revenue: 25,
          desc: 'Moutain railway (B%1$d). Cannot be sold but can be exchanged for a 10 percent share in a '\
                'regional railway during phase 3 SR, or when first 4 train is bought. '\
                'If no regional railway shares are available from IPO this private is lost without compensation.',
          abilities: [
            {
              type: 'no_buy',
              owner_type: 'player',
            },
            {
              type: 'exchange',
              corporations: %w[BK MS CL SB BH],
              owner_type: 'player',
              from: %w[ipo market],
            },
          ],
        }.freeze

        def mountain_railway_definition(index)
          real_index = index + 1
          definition = MOUNTAIN_RAILWAY_DEFINITION.dup
          definition[:sym] = format(definition[:sym], real_index)
          definition[:name] = format(definition[:name], real_index, MOUNTAIN_RAILWAY_NAMES[real_index])
          definition[:desc] = format(definition[:desc], real_index)
          definition
        end

        WIEN = 'city=revenue:30;path=a:0,b:_0;city=revenue:30;'\
               'path=a:1,b:_1;city=revenue:30;path=a:2,b:_2;upgrade=cost:20,terrain:water;label=W'

        TOWN = 'town=revenue:0'
        TOWN_WITH_WATER = 'town=revenue:0;upgrade=cost:50,terrain:water'
        TOWN_WITH_MOUNTAIN = 'town=revenue:0;upgrade=cost:70,terrain:mountain'
        DOUBLE_TOWN = 'town=revenue:0;town=revenue:0'
        DOUBLE_TOWN_WITH_WATER = 'town=revenue:0;town=revenue:0;upgrade=cost:20,terrain:water'
        CITY = 'city=revenue:0'
        CITY_WITH_WATER = 'city=revenue:0;upgrade=cost:50,terrain:water'
        CITY_WITH_MOUNTAIN = 'city=revenue:0;upgrade=cost:70,terrain:mountain'
        PLAIN = ''
        PLAIN_WITH_MOUNTAIN = 'upgrade=cost:70,terrain:mountain'
        PLAIN_WITH_WATER = 'upgrade=cost:50,terrain:water'
        CITY_LABEL_Y = 'city=revenue:0;label=Y'
        CITY_LABEL_Y_WATER = 'city=revenue:0;upgrade=cost:50,terrain:water;label=Y'

        def base_map
          plain_hexes = %w[B18 C15 C17 C19 D10 D12 D16 D18 D20 E5 E7 E9 E11 E13 E17 F8 F16 F18 F20 G7 G9 G17
          G19 H14 H18 I5 I11 J2 J10 J12 K5 K13 L4 L10 L12 L16 M11 N14 N16 N18 O9 O11 O13 O17]
          one_town = %w[B12 B14 B16 F4 F6 G11 G15 H10 I15 K3 K11 L2]
          two_towns = %w[I17 H4 N10 L8 M7]
          {
            red: {
              ['C21'] => 'offboard=revenue:yellow_20|green_20|brown_40;path=a:1,b:_0',
              ['H22'] =>
              'offboard=revenue:yellow_20|green_30|brown_40,groups:OS;path=a:1,b:_0;border=edge:0',
              ['I21'] =>
              'offboard=revenue:yellow_20|green_30|brown_40,hide:1,groups:OS;border=edge:3',
              ['M5'] =>
              'offboard=revenue:yellow_0|green_50|brown_0,groups:Alsace;path=a:3,b:_0;border=edge:0',
              ['N4'] =>
              'offboard=revenue:yellow_0|green_50|brown_0,hide:1,groups:Alsace;path=a:4,b:_0;border=edge:3',
              },
              yellow: {
                ['E19'] =>
                         'city=revenue:30,loc:1;city=revenue:30,loc:3;path=a:1,b:_0;path=a:2,b:_1;label=Berlin',
                ['G3'] =>
                'city=revenue:0,loc:0;city=revenue:0,loc:4.5;label=XX;upgrade=cost:50',
                ['J6'] => 'city=revenue:0;city=revenue:0;label=XX;upgrade=cost:50',
                ['L6'] => 'city=revenue:0,loc:5.5;city=revenue:0,loc:4;label=XX',
              },
              green: {
                ['C11'] =>
                'city=revenue:40;path=a:0,b:_0;city=revenue:40;path=a:2,b:_1;'\
                'city=revenue=40;path=a:4,b:_2;path=a:3,b:_2;label=HH',
                ['J8'] =>
                'city=revenue:40,slots:2;path=a:0,b:_0;path=a:1,b:_0;path=a:3,b:_0;path=a:4,b:_0;upgrade=cost:50;label=Y',
                ['L14'] =>
                'city=revenue:30,loc:2.5;path=a:3,b:_0;path=a:2,b:_0;'\
                'city=revenue:30,loc:5.5;path=a:5,b:_1;path=a:0,b:_1;label=XX',
              },
              brown: {
                %w[A9 G1] => 'path=a:4,b:5',
                ['A17'] => 'town=revenue:10,loc:5;path=a:5,b:_0',
                ['B8'] => 'path=a:5,b:0',
                ['C5'] =>
                'town=revenue:10;path=a:4,b:_0;town=revenue:10;path=a:5,b:_1;path=a:0,b:_1',
                ['C7'] => 'town=revenue:10;path=a:3,b:_0;path=a:5,b:_0;path=a:0,b:1',
                ['C13'] =>
                'city=revenue:10,loc:3;path=a:3,b:_0;path=a:1,b:_0;path=a:1,b:5;path=a:5,b:_0',
                ['D4'] => 'path=a:3,b:5',
                ['D6'] =>
                'city=revenue:10;path=a:2,b:_0;path=a:3,b:_0;path=a:4,b:_0;path=a:5,b:_0',
                ['E21'] => 'town=revenue:10;path=a:1,b:_0;path=a:0,b:_0;path=a:2,b:_0',
                ['F12'] => 'city=revenue:20;path=a:1,b:_0;path=a:0,b:_0;path=a:4,b:_0',
                ['G21'] => 'path=a:2,b:0',
                ['I1'] => 'town=revenue:10;path=a:3,b:_0;path=a:4,b:_0;path=a:5,b:_0',
                ['I19'] => 'path=a:1,b:2;path=a:2,b:3;path=a:1,b:3',
                ['J4'] => 'town=revenue:10;path=a:2,b:_0;path=a:5,b:_0;path=a:3,b:4',
                ['J16'] => 'path=a:0,b:1;path=a:0,b:3;path=a:1,b:3',
                ['M19'] => 'town=revenue:10;path=a:0,b:_0;path=a:1,b:_0',
                ['N6'] => 'path=a:0,b:1;path=a:1,b:3;path=a:0,b:3',
                %w[P6 P14] => 'path=a:2,b:3',
                ['P10'] => 'town=revenue:10;path=a:2,b:_0;path=a:3,b:_0',
                },
            white: {
              one_town => TOWN,
              %w[I13] => TOWN_WITH_MOUNTAIN,
              %w[M15] => TOWN_WITH_WATER,
              two_towns => DOUBLE_TOWN,
              %w[D8] => CITY_WITH_WATER,
              %w[F10 G5 H20 A11 F10 F14 H16 M9 N12 O5] => CITY,
              plain_hexes => PLAIN,
              %w[O7 N8 K15 J14 H12 I9 I7 H8 H6 G13] => PLAIN_WITH_MOUNTAIN,
              %w[D14 E15 M13 M17 K7 K9] => PLAIN_WITH_WATER,
              ['E23'] => WIEN,
              ['F24'] => 'city=revenue:20;path=a:0,b:_0;city=revenue:20;path=a:3,b:_1;upgrade=cost:20,terrain:water;'\
                         'label=Bu',
              %w[H2 I3] => CITY_LABEL_Y_WATER,
              %w[H20 O15] => CITY_LABEL_Y,
              ['C9'] => 'border=edge:3,type:water',
              ['B10'] => 'border=edge:0,type:water',
            },
          }
        end
      end
    end
  end
end
